

struct VerifyingKey {
    G1Point alpha;
    G2Point beta;
    G2Point gamma;
    G2Point delta;
    G1Point[ZKSNARK.N_1] gamma_abc;
}

struct Proof {
    G1Point a;
    G2Point b;
    G1Point c;
}


library ZKSNARK {

    static const VerifyingKey vk = {...};

    // Number of inputs.
    static const int N = 4;
    static const int N_1 = 5; // N + 1, gamma_abc length


    static function verify(int[ZKSNARK.N] inputs, Proof proof) : bool {

        G1Point vk_x = vk.gamma_abc[0];

        
        loop (N) : i {
            G1Point p = BN256.mulG1Point(
                vk.gamma_abc[i + 1],
                inputs[i]
            );
            vk_x = BN256.addG1Points(vk_x, p);
        }

        return BN256Pairing.pairCheckP4(
            {proof.a.x, -proof.a.y}, proof.b,
            vk.alpha, vk.beta,
            vk_x, vk.gamma,
            proof.c, vk.delta);
    }

}